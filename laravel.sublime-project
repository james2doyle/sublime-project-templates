{
  "folders": [
    {
      "path": ".",
      "file_exclude_patterns": [
        ".gitkeep",
        "*.lock",
        "*lock.json",
        "database/*.sqlite",
        "artisan",
        ".phpstorm.meta.php",
        "_ide_helper.php",
        "_ide_helper_models.php",
        "programmatic-types.graphql",
        "_lighthouse_ide_helper.php"
      ],
      "folder_exclude_patterns": [
        ".aider.*",
        ".opencode",
        ".vemto",
        "vendor",
        "node_modules",
        "storage",
        "bootstrap/cache",
        "public/js",
        "public/css",
        "public/build"
      ],
      "follow_symlinks": true
    }
  ],
  "build_systems": [
    {
      "name": "Project - Lint",
      "working_dir": "$project_path",
      "shell_cmd": "composer run lint"
    },
    {
      "name": "Project - Test",
      "working_dir": "$project_path",
      "shell_cmd": "composer run test"
    },
    {
      "name": "Project - Mess Detector",
      "working_dir": "$project_path",
      "shell_cmd": "composer run md"
    },
    {
      "name": "Project - IDE Helper",
      "working_dir": "$project_path",
      "shell_cmd": "php artisan ide-helper:models -n"
    },
    {
      "name": "Project - Open Test",
      "working_dir": "$project_path",
      "shell_cmd": "find tests -print | grep $file_base_name | sed -n 1p | xargs subl"
    },
    {
      "name": "Project - Test File",
      "working_dir": "$project_path",
      "shell_cmd": "php artisan test --filter $file_base_name"
    },
    {
      "name": "Project - Format Blade File",
      "working_dir": "$project_path",
      "shell_cmd": "./node_modules/.bin/blade-formatter --write $file"
    },
    {
      "name": "Project - Format All Blade Files",
      "working_dir": "$project_path",
      "shell_cmd": "./node_modules/.bin/blade-formatter --write \"resources/views/**/*.blade.php\""
    },
    {
      "name": "Project - Open Log",
      "working_dir": "$project_path",
      "shell_cmd": "subl storage/logs/*.log",
      "quiet": true
    },
    {
      "name": "Project - Clear Logs",
      "working_dir": "$project_path",
      "shell_cmd": "composer run clear-logs",
      "quiet": true
    },
    {
      "name": "Project - Mago fmt",
      "working_dir": "$project_path",
      "shell_cmd": "mago fmt $file",
      "quiet": true
    },
    {
      "name": "Project - Mago lint",
      "working_dir": "$project_path",
      "shell_cmd": "mago lint $file",
      "quiet": true
    },
    {
      "name": "Project - Mago lint & fix",
      "working_dir": "$project_path",
      "shell_cmd": "mago lint --reporting-format short --format $file",
      "quiet": true
    },
    {
      "name": "Project - Run in Artisan",
      "working_dir": "$project_path",
      "target": "exec_selection",
      "cancel": {
        "kill": true
      },
      "shell_cmd": "php artisan tinker --execute \"print_r(SELECTION)\""
    },
    {
      "name": "Project - Sort CSS Classes",
      "working_dir": "$project_path",
      "shell_cmd": "rustywind --write $file"
    }
  ],
  "settings": {
    "build_on_save": {
      // print details on what is happening
      "logging": false,
      // enable or disable build-on-save
      "enabled": true,
      // run the default build system when there is no match
      "always_run_default": false,
      // panel toggle
      "show_panel_on_build": false,
      // delay the build in case there is a reason
      "delay": 0,
      // Build-on-save will apply only to these file extensions
      "build_system_map": {
        // Examples:
        // ".py": "Python",  // Uses the built-in Python build system
        // ".js": "NodeJS",  // Assumes you have a NodeJS.sublime-build file
        // ".cpp": "C++ Single File", // Another example build system name
        // ".tex": "LaTeX",
        // The keys are file extensions (with the leading dot).
        // The values are the NAMES of Sublime Text build systems
        // (as they appear in the Tools -> Build System menu).
        // "HTML (Blade, AlpineJS)": "Project - Sort CSS Classes",
        "HTML (Blade, AlpineJS)": "Project - Format Blade File",
        // "PHP": "Project - Mago fmt",
        // "PHP": "Project - Mago lint & fix"
      },
    },
    "tab_size": 4,
    "translate_tabs_to_spaces": true,
    "jsdocs_return_tag": "@return",
    "lsp_format_on_save": true,
    "lsp_code_actions_on_save": {
      "source.organizeImports": true,
      "source.fixAll.biome": true,
      "source.fixAll.eslint": false
    },
    "LSP": {
      "formatters": {
        "source.ts": "LSP-biome",
        "source.js": "LSP-biome",
        "source.json": "LSP-json",
        "text.html.basic": "LSP-biome",
        "text.html.blade": "blade",
        "embedding.php": "LSP-intelephense",
        "text.html.vue source.ts.embedded.html": "LSP-biome",
        "text.html.blade meta.tag.block.any.html": "LSP-biome",
        "source.jsx": "LSP-biome"
      },
      "LSP-eslint": {
        "enabled": false
      },
      "LSP-json": {
        "enabled": false
      },
      "LSP-biome": {
        "enabled": true
      },
      "LSP-typescript": {
        "enabled": false
      },
      "vtsls": {
        "enabled": true
      },
      "laravel": {
        "enabled": true
      }
    }
  },
  "syntax_override": {
    "\\.env.*$": [
      "ShellScript",
      "Bash"
    ],
    "\\.env": [
      "ShellScript",
      "Bash"
    ],
    "\\.inc$": [
      "PHP",
      "PHP"
    ],
    "\\.*rc$": [
      "JSON",
      "JSON"
    ],
    "livewire.*\\.blade\\.php$": [
      "PHP",
      "PHP"
    ],
    "(!?livewire.*)\\.blade\\.php$": [
      "Laravel Blade",
      "Syntaxes",
      "HTML (Blade)"
    ],
    "\\.css$": [
      "Tailwind CSS",
      "Tailwind CSS"
    ],
    "\\.log$": [
      "sublime-log-syntax",
      "log"
    ]
  }
}